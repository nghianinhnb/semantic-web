#!/usr/bin/env python3
"""
Demo test DBpedia query - Kh√¥ng c·∫ßn OpenAI API
Ch·ªâ ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi v√† d·ªØ li·ªáu t·ª´ DBpedia
"""

from SPARQLWrapper import SPARQLWrapper, JSON
import json


def test_dbpedia_connection():
    """Test k·∫øt n·ªëi v√† query DBpedia"""
    print("üåç Test k·∫øt n·ªëi DBpedia")
    print("=" * 40)

    # Kh·ªüi t·∫°o SPARQL wrapper
    sparql = SPARQLWrapper("http://dbpedia.org/sparql")
    sparql.setReturnFormat(JSON)

    # Query ƒë∆°n gi·∫£n ƒë·ªÉ test
    query = """
    PREFIX dbo: <http://dbpedia.org/ontology/>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    
    SELECT DISTINCT ?city ?cityName ?country ?description
    WHERE {
        ?city a dbo:City .
        ?city rdfs:label ?cityName .
        ?city dbo:country ?country .
        ?city rdfs:comment ?description .
        FILTER(LANG(?cityName) = "en")
        FILTER(LANG(?description) = "en")
    }
    LIMIT 5
    """

    try:
        print("üîç ƒêang query DBpedia...")
        sparql.setQuery(query)
        results = sparql.query().convert()

        print(
            f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! T√¨m th·∫•y {len(results['results']['bindings'])} k·∫øt qu·∫£"
        )

        print("\nüìã K·∫øt qu·∫£:")
        print("-" * 40)

        for i, result in enumerate(results["results"]["bindings"], 1):
            city_name = result["cityName"]["value"]
            country = result["country"]["value"].split("/")[-1].replace("_", " ")
            description = result["description"]["value"][:100] + "..."  # C·∫Øt ng·∫Øn m√¥ t·∫£

            print(f"{i}. {city_name} ({country})")
            print(f"   M√¥ t·∫£: {description}")
            print()

        return True

    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi DBpedia: {e}")
        return False


def test_specific_city_query():
    """Test query th√†nh ph·ªë c·ª• th·ªÉ"""
    print("\nüèôÔ∏è Test query th√†nh ph·ªë c·ª• th·ªÉ")
    print("=" * 40)

    sparql = SPARQLWrapper("http://dbpedia.org/sparql")
    sparql.setReturnFormat(JSON)

    # Query th√¥ng tin v·ªÅ London
    query = """
    PREFIX dbo: <http://dbpedia.org/ontology/>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    
    SELECT DISTINCT ?city ?cityName ?country ?description ?population ?area
    WHERE {
        ?city a dbo:City .
        ?city rdfs:label ?cityName .
        ?city dbo:country ?country .
        ?city rdfs:comment ?description .
        FILTER(LANG(?cityName) = "en")
        FILTER(LANG(?description) = "en")
        FILTER(CONTAINS(LCASE(?cityName), "london"))
        OPTIONAL { ?city dbo:populationTotal ?population }
        OPTIONAL { ?city dbo:areaTotal ?area }
    }
    LIMIT 1
    """

    try:
        sparql.setQuery(query)
        results = sparql.query().convert()

        if results["results"]["bindings"]:
            result = results["results"]["bindings"][0]

            print("‚úÖ T√¨m th·∫•y th√¥ng tin v·ªÅ London:")
            print(f"   T√™n: {result['cityName']['value']}")
            print(
                f"   Qu·ªëc gia: {result['country']['value'].split('/')[-1].replace('_', ' ')}"
            )
            print(f"   D√¢n s·ªë: {result.get('population', {}).get('value', 'Unknown')}")
            print(f"   Di·ªán t√≠ch: {result.get('area', {}).get('value', 'Unknown')}")
            print(f"   M√¥ t·∫£: {result['description']['value'][:200]}...")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ London")

        return True

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False


def main():
    """H√†m main"""
    print("üß™ Test DBpedia Connection")
    print("=" * 50)

    # Test k·∫øt n·ªëi c∆° b·∫£n
    if test_dbpedia_connection():
        print("\n‚úÖ Test k·∫øt n·ªëi DBpedia th√†nh c√¥ng!")
    else:
        print("\n‚ùå Test k·∫øt n·ªëi DBpedia th·∫•t b·∫°i!")
        return

    # Test query th√†nh ph·ªë c·ª• th·ªÉ
    if test_specific_city_query():
        print("\n‚úÖ Test query th√†nh ph·ªë c·ª• th·ªÉ th√†nh c√¥ng!")
    else:
        print("\n‚ùå Test query th√†nh ph·ªë c·ª• th·ªÉ th·∫•t b·∫°i!")

    print("\nüéâ T·∫•t c·∫£ test ho√†n th√†nh!")
    print("üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y demo ƒë·∫ßy ƒë·ªß v·ªõi OpenAI API")


if __name__ == "__main__":
    main()
