#!/usr/bin/env python3
"""
Demo ƒë∆°n gi·∫£n: Semantic Web + RAG + Chatbot
S·ª≠ d·ª•ng DBpedia ƒë·ªÉ l·∫•y th√¥ng tin th√†nh ph·ªë v√† t·∫°o chatbot th√¥ng minh
"""

import os
import sys
from dotenv import load_dotenv
from SPARQLWrapper import SPARQLWrapper, JSON
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate

# Load environment variables
load_dotenv()


class SimpleSemanticWebRAG:
    def __init__(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng Semantic Web + RAG"""
        # Ki·ªÉm tra API key
        if not os.getenv("OPENAI_API_KEY"):
            print("‚ùå L·ªói: Vui l√≤ng thi·∫øt l·∫≠p OPENAI_API_KEY trong file .env")
            print("üí° T·∫°o file .env v·ªõi n·ªôi dung: OPENAI_API_KEY=your_api_key_here")
            sys.exit(1)

        # Kh·ªüi t·∫°o SPARQL wrapper cho DBpedia
        self.sparql = SPARQLWrapper("http://dbpedia.org/sparql")
        self.sparql.setReturnFormat(JSON)

        # Kh·ªüi t·∫°o OpenAI components
        self.embeddings = OpenAIEmbeddings(openai_api_key=os.getenv("OPENAI_API_KEY"))
        self.llm = ChatOpenAI(
            openai_api_key=os.getenv("OPENAI_API_KEY"),
            model_name="gpt-3.5-turbo",
            temperature=0.7,
        )

        self.vector_store = None
        self.cities_data = []

    def query_dbpedia_cities(self, limit=10):
        """Query th√¥ng tin th√†nh ph·ªë t·ª´ DBpedia"""
        print(f"üîç ƒêang query {limit} th√†nh ph·ªë t·ª´ DBpedia...")

        query = """
        PREFIX dbo: <http://dbpedia.org/ontology/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        
        SELECT DISTINCT ?city ?cityName ?country ?description ?population
        WHERE {
            ?city a dbo:City .
            ?city rdfs:label ?cityName .
            ?city dbo:country ?country .
            ?city rdfs:comment ?description .
            FILTER(LANG(?cityName) = "en")
            FILTER(LANG(?description) = "en")
            OPTIONAL { ?city dbo:populationTotal ?population }
        }
        LIMIT """ + str(
            limit
        )

        try:
            self.sparql.setQuery(query)
            results = self.sparql.query().convert()

            cities = []
            for result in results["results"]["bindings"]:
                city_info = {
                    "name": result["cityName"]["value"],
                    "country": result["country"]["value"]
                    .split("/")[-1]
                    .replace("_", " "),
                    "description": result["description"]["value"],
                    "population": result.get("population", {}).get("value", "Unknown"),
                }
                cities.append(city_info)

            self.cities_data = cities
            print(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c {len(cities)} th√†nh ph·ªë t·ª´ DBpedia")
            return cities

        except Exception as e:
            print(f"‚ùå L·ªói khi query DBpedia: {e}")
            return []

    def setup_rag(self):
        """Thi·∫øt l·∫≠p RAG system"""
        if not self.cities_data:
            print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu th√†nh ph·ªë. Vui l√≤ng query DBpedia tr∆∞·ªõc.")
            return False

        print("üîß ƒêang thi·∫øt l·∫≠p RAG system...")

        # T·∫°o documents t·ª´ d·ªØ li·ªáu th√†nh ph·ªë
        documents = []
        for city in self.cities_data:
            content = f"""
            Th√†nh ph·ªë: {city['name']}
            Qu·ªëc gia: {city['country']}
            M√¥ t·∫£: {city['description']}
            D√¢n s·ªë: {city['population']}
            """

            metadata = {
                "city_name": city["name"],
                "country": city["country"],
                "source": "DBpedia",
            }

            documents.append(Document(page_content=content, metadata=metadata))

        # Split documents
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000, chunk_overlap=200
        )
        split_docs = text_splitter.split_documents(documents)

        # T·∫°o vector store
        self.vector_store = Chroma.from_documents(
            documents=split_docs, embedding=self.embeddings
        )

        print("‚úÖ RAG system ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!")
        return True

    def chat(self, question):
        """Chat v·ªõi h·ªá th·ªëng RAG"""
        if not self.vector_store:
            return "‚ùå RAG system ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng setup tr∆∞·ªõc."

        # Template prompt
        template = """
        B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh chuy√™n v·ªÅ th√¥ng tin ƒë·ªãa l√Ω v√† th√†nh ph·ªë.
        S·ª≠ d·ª•ng th√¥ng tin sau ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
        N·∫øu b·∫°n kh√¥ng t√¨m th·∫•y th√¥ng tin trong context, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng bi·∫øt.
        
        Context: {context}
        
        C√¢u h·ªèi: {question}
        
        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát:
        """

        prompt = PromptTemplate(
            template=template, input_variables=["context", "question"]
        )

        # T·∫°o QA chain
        qa_chain = RetrievalQA.from_chain_type(
            llm=self.llm,
            chain_type="stuff",
            retriever=self.vector_store.as_retriever(search_kwargs={"k": 3}),
            chain_type_kwargs={"prompt": prompt},
        )

        try:
            response = qa_chain.run(question)
            return response
        except Exception as e:
            return f"‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {e}"


def main():
    """H√†m main ƒë·ªÉ ch·∫°y demo"""
    print("üåç Demo: Semantic Web + RAG + Chatbot")
    print("=" * 50)

    # Kh·ªüi t·∫°o h·ªá th·ªëng
    system = SimpleSemanticWebRAG()

    # Query d·ªØ li·ªáu t·ª´ DBpedia
    cities = system.query_dbpedia_cities(limit=15)
    if not cities:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ DBpedia. Tho√°t ch∆∞∆°ng tr√¨nh.")
        return

    # Hi·ªÉn th·ªã danh s√°ch th√†nh ph·ªë
    print("\nüìã Danh s√°ch th√†nh ph·ªë ƒë√£ l·∫•y:")
    for i, city in enumerate(cities[:5], 1):  # Ch·ªâ hi·ªÉn th·ªã 5 th√†nh ph·ªë ƒë·∫ßu
        print(f"{i}. {city['name']} ({city['country']})")
    if len(cities) > 5:
        print(f"... v√† {len(cities) - 5} th√†nh ph·ªë kh√°c")

    # Thi·∫øt l·∫≠p RAG
    if not system.setup_rag():
        return

    print("\nüí¨ B·∫Øt ƒë·∫ßu chat! (G√µ 'quit' ƒë·ªÉ tho√°t)")
    print("-" * 50)

    # Chat loop
    while True:
        try:
            question = input("\nü§î C√¢u h·ªèi c·ªßa b·∫°n: ").strip()

            if question.lower() in ["quit", "exit", "tho√°t"]:
                print("üëã T·∫°m bi·ªát!")
                break

            if not question:
                continue

            print("ü§ñ ƒêang t√¨m ki·∫øm th√¥ng tin...")
            response = system.chat(question)
            print(f"üí° Tr·∫£ l·ªùi: {response}")

        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")


if __name__ == "__main__":
    main()
